-- Quartus Prime VHDL tmplate
-- Single-Port ROM

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity rom is

	generic 
	(
		DATA_WIDTH : natural := 32;
		ADDR_WIDTH : natural := 32
	);

	port 
	(
		addr	: in std_logic_vector (ADDR_WIDTH - 1 downto 0);
		q		: out std_logic_vector((DATA_WIDTH -1) downto 0)
	);

end entity;

architecture rtl of rom is

	-- Build a 2-D array type for the ROM
	subtype word_t is std_logic_vector((DATA_WIDTH-1) downto 0);
	type memory_t is array(2**ADDR_WIDTH-1 downto 0) of word_t;

	function init_rom
		return memory_t is 
		variable tmp : memory_t := (others => (others => '0'));
		
		begin
        -- Inicializa os endere√ßos:
tmp(0) := b"000000000010100000000";
tmp(1) := b"000000000010000000000";
tmp(2) := b"000000000001100000000";
tmp(3) := b"000000000001000000000";
tmp(4) := b"000000000000100000000";
tmp(5) := b"000000000000000000000";
tmp(6) := b"110000010110100000101";
tmp(7) := b"110000010010000000100";
tmp(8) := b"110000001101100000011";
tmp(9) := b"110000001001000000010";
tmp(10) := b"110000000100100000001";
tmp(11) := b"110000000000000000000";
tmp(12) := b"010000000000001001110";
tmp(13) := b"000100000000000000001";
tmp(14) := b"110000000000000000000";
tmp(15) := b"001000000000000001010";
tmp(16) := b"001100000000000110101";
tmp(17) := b"010100000011000000110";
tmp(18) := b"001000011011000000001";
tmp(19) := b"001100000000000010101";
tmp(20) := b"010000000000000011001";
tmp(21) := b"000100000000000000001";
tmp(22) := b"110000000000000000000";
tmp(23) := b"001000000000000001010";
tmp(24) := b"001100000000000110101";
tmp(25) := b"010100000011000000110";
tmp(26) := b"001000011011000000010";
tmp(27) := b"001100000000000111100";
tmp(28) := b"010100000011000000110";
tmp(29) := b"001000011011000000100";
tmp(30) := b"001100000000001000110";
tmp(31) := b"010100000011000000110";
tmp(32) := b"001000011011000001000";
tmp(33) := b"001100000000000000000";
tmp(34) := b"001000000000000001010";
tmp(35) := b"001100000000000110101";
tmp(36) := b"001000000100100000110";
tmp(37) := b"001100000000000111010";
tmp(38) := b"001000001001000001010";
tmp(39) := b"001100000000000111111";
tmp(40) := b"001000001101100000110";
tmp(41) := b"001100000000001000100";
tmp(42) := b"001000010010000001010";
tmp(43) := b"001100000000001001001";
tmp(44) := b"011000010011000000100";
tmp(45) := b"011000010111100000010";
tmp(46) := b"001000011011000000000";
tmp(47) := b"001100000000001001110";
tmp(48) := b"001000011111100000000";
tmp(49) := b"001100000000001001110";
tmp(50) := b"111011011100000000000";
tmp(51) := b"001100000000000000000";
tmp(52) := b"010000000000001001110";
tmp(53) := b"000000000000000000000";
tmp(54) := b"110000000000000000000";
tmp(55) := b"000100000100100000001";
tmp(56) := b"110000000100100000001";
tmp(57) := b"010000000000000100100";
tmp(58) := b"000000000000100000000";
tmp(59) := b"110000000100100000001";
tmp(60) := b"000100001001000000001";
tmp(61) := b"110000001001000000010";
tmp(62) := b"010000000000000100110";
tmp(63) := b"000000000001000000000";
tmp(64) := b"110000001001000000010";
tmp(65) := b"000100001101100000001";
tmp(66) := b"110000001101100000011";
tmp(67) := b"010000000000000101000";
tmp(68) := b"000000000001100000000";
tmp(69) := b"110000001101100000011";
tmp(70) := b"000100010010000000001";
tmp(71) := b"110000010010000000100";
tmp(72) := b"010000000000000101010";
tmp(73) := b"000000000010000000000";
tmp(74) := b"110000010010000000100";
tmp(75) := b"000100010110100000001";
tmp(76) := b"110000010110100000101";
tmp(77) := b"010000000000000101100";
tmp(78) := b"010100000011000010000";
tmp(79) := b"001000011011000010000";
tmp(80) := b"001100000000000001101";
tmp(81) := b"010000000000001001110";




        return tmp;
	end init_rom;	 

	-- Declare the ROM signal and specify a default value.	Quartus Prime
	-- will create a memory initialization file (.mif) based on the 
	-- default value.
	signal rom : memory_t := init_rom;

begin
		q <= rom(to_integer(unsigned(addr)));
end rtl;
